[This is a brief tutorial on Tori-Lisp, an ersatz Lisp for little
birds. A passing familiarity with Lisp and Lisp-like languages is
presumed.]

TL programs consist of expressions. The simplest expressions are
things like numbers and strings, which evaluate to themselves.

    鳥>  25
    ;;=> 25

    鳥>  "foo"
    ;;=> 'foo'

There's an important detail about TL that bears mentioning at this
time. That is, the language is hosted on the JavaScript programming
language and thus "bottoms-out" at JavaScript data-types and
structures. Therefore, the TL console will always display its
results as JavaScript types and indeed, the evaluation engine of
the language operates on and with JavaScript types and functions.

TL is like most Lisp-like languages in that the list form
represents a function call:

    鳥>  (+ 1 2)
    ;;=> 3

Since expression and evaluation are both defined recursively, 
programs can be as complex as you want:

    鳥>  (+ (+ 1 2) (+ 3 (+ 4 5)))
    ;;=> 15 

Unlike many Lisps, TL functions always expect a fixed number of 
arguments. For example, the `+` function shown above expects to
receive 2 arguments and if it receives too many then and error
occurs:

    鳥>  (+ 1 2 3)
    ;;=> Error: Too many arguments to function: expected 2, got 3

However, if you supply fewer arguments than a function expects then
a new function will be reurned:

    鳥>  (+ 1)
    ;;=> [Function: curried]

Functions in TL are "curried" by default. This means that when a 
function is called it might return another function that expects to 
receive the remainder of its expected arguments. Once all of the 
expected arguments are recieved the function is executed and a 
result returned.

    鳥>  ((+ 1) 2)
    ;;=> 3

Lisp dialects like TL have a data type most languages don't:
symbols.  We've already seen one: `+` is a symbol.  Symbols don't
evaluate to themselves the way numbers and strings do.  They return
whatever value they've been assigned.

If we give foo the value 13, it will return 13 when evaluated:

    鳥>  (def foo 13)
	;;=> 13
    鳥>  foo
	;;=> 13

You can turn off evaluation by putting a single quote character
before an expression.  So `'foo` returns the JavaScript equivalent
to a TL symbol `"'foo"`.

    鳥>  'foo
	;;=> "'foo"

Particularly observant readers may be wondering how we got away
with using `foo` as the first argument to `def`.  If the arguments 
are evaluated left to right, why didn't this cause an error when 
`foo` was evaluated?  There are some operators that violate the usual
evaluation rule, and `def` is one of them.  Its first argument isn't
evaluated.

    鳥>  (+ 1 2)
	;;=> 3
    鳥>  '(+ 1 2)
	;;=> ["'+", 1, 2]

The first expression returns the number 3.  The second, because it
was quoted, returns a JS array consisting of the string `"'+` and the 
numbers 1 and 2. The use of the pattern `"'symbol"` is the way that
symbols are encoded in TL.

You can build up TL lists with `cons`, which returns a list with a new
element on the front:

    鳥>  (cons 'f '(a b))
	;;=> [ "'f", "'a", "'b" ]




    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
	
